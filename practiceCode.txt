// Looping a triangle
let output = "";
for (var i = 1; i <= 7; i++){
  output += "#";
  console.log(output);
}

// FizzBuzz put Fizz for numbers divisible by 3, Buzz for numbers divisible by 5,
// and FizzBuzz for numbers divisible by 5 and 3 or 15.

output = "";
for (var i = 1; i <= 100; i++){
  if (i % 15 == 0){
    output += "FizzBuzz ";
  }else if (i % 3 == 0){
    output += "Fizz ";
  }else if (i % 5 == 0){
    output += "Buzz ";
  }else{
    output += i + " ";
  }
  if(i % 10 == 0){
    output += "\n";
  }
}
console.log(output);

// Creates a chessboard/checkerboard
output = "";
for (var i = 1; i <= 8; i++){
  for (var j = 1; j <= 8; j++){
    if((i % 2 == 1 && j % 2 == 0) || (i % 2 == 0 && j % 2 == 1)){
     	output += "#";
    }else{
      output += " ";
    }
    if (j == 8){
      output += "\n";
    }
  }
}
console.log(output);

// min
function min(val1, val2){
 if(val1 < val2){
   return val1;
 }else{
  return val2;
 }
}
console.log(min(0, 10));
// → 0
console.log(min(0, -10));
// → -10

// recursion example
// Your code here.
function isEven(val){
 if (val == 0){
   return true;
 }else if (val == 1){
   return false;
 }else{
   return isEven(val - 2);
 }
}

console.log(isEven(50));
// → true
console.log(isEven(75));
// → false
console.log(isEven(-1));
// → ??

// Count characters
function countBs(val){
  var count = 0
  for(var i = 0; i < val.length; i++){
   if(val[i] === "B"){
     count++;
   }
  }
  return count;
}

function countChar(val, char){
  var count = 0
  for(var i = 0; i < val.length; i++){
   if(val[i] === char){
     count++;
   }
  }
  return count;
}

console.log(countBs("BBC"));
// → 2
console.log(countChar("kakkerlak", "k"));
// → 4

var JOURNAL = [
  {"events":["carrot","exercise","weekend"],"squirrel":false},
  {"events":["bread","pudding","brushed teeth","weekend","touched tree"],"squirrel":false},
  {"events":["carrot","nachos","brushed teeth","cycling","weekend"],"squirrel":false},
  {"events":["brussel sprouts","ice cream","brushed teeth","computer","weekend"],"squirrel":false},
  {"events":["potatoes","candy","brushed teeth","exercise","weekend","dentist"],"squirrel":false},
  {"events":["brussel sprouts","pudding","brushed teeth","running","weekend"],"squirrel":false},
  {"events":["pizza","brushed teeth","computer","work","touched tree"],"squirrel":false},
  {"events":["bread","beer","brushed teeth","cycling","work"],"squirrel":false},
  {"events":["cauliflower","brushed teeth","work"],"squirrel":false},
  {"events":["pizza","brushed teeth","cycling","work"],"squirrel":false},
  {"events":["lasagna","nachos","brushed teeth","work"],"squirrel":false},
  {"events":["brushed teeth","weekend","touched tree"],"squirrel":false},
  {"events":["lettuce","brushed teeth","television","weekend"],"squirrel":false},
  {"events":["spaghetti","brushed teeth","work"],"squirrel":false},
  {"events":["brushed teeth","computer","work"],"squirrel":false},
  {"events":["lettuce","nachos","brushed teeth","work"],"squirrel":false},
  {"events":["carrot","brushed teeth","running","work"],"squirrel":false},
  {"events":["brushed teeth","work"],"squirrel":false},
  {"events":["cauliflower","reading","weekend"],"squirrel":false},
  {"events":["bread","brushed teeth","weekend"],"squirrel":false},
  {"events":["lasagna","brushed teeth","exercise","work"],"squirrel":false},
  {"events":["spaghetti","brushed teeth","reading","work"],"squirrel":false},
  {"events":["carrot","ice cream","brushed teeth","television","work"],"squirrel":false},
  {"events":["spaghetti","nachos","work"],"squirrel":false},
  {"events":["cauliflower","ice cream","brushed teeth","cycling","work"],"squirrel":false},
  {"events":["spaghetti","peanuts","computer","weekend"],"squirrel":true},
  {"events":["potatoes","ice cream","brushed teeth","computer","weekend"],"squirrel":false},
  {"events":["potatoes","ice cream","brushed teeth","work"],"squirrel":false},
  {"events":["peanuts","brushed teeth","running","work"],"squirrel":false},
  {"events":["potatoes","exercise","work"],"squirrel":false},
  {"events":["pizza","ice cream","computer","work"],"squirrel":false},
  {"events":["lasagna","ice cream","work"],"squirrel":false},
  {"events":["cauliflower","candy","reading","weekend"],"squirrel":false},
  {"events":["lasagna","nachos","brushed teeth","running","weekend"],"squirrel":false},
  {"events":["potatoes","brushed teeth","work"],"squirrel":false},
  {"events":["carrot","work"],"squirrel":false},
  {"events":["pizza","beer","work","dentist"],"squirrel":false},
  {"events":["lasagna","pudding","cycling","work"],"squirrel":false},
  {"events":["spaghetti","brushed teeth","reading","work"],"squirrel":false},
  {"events":["spaghetti","pudding","television","weekend"],"squirrel":false},
  {"events":["bread","brushed teeth","exercise","weekend"],"squirrel":false},
  {"events":["lasagna","peanuts","work"],"squirrel":true},
  {"events":["pizza","work"],"squirrel":false},
  {"events":["potatoes","exercise","work"],"squirrel":false},
  {"events":["brushed teeth","exercise","work"],"squirrel":false},
  {"events":["spaghetti","brushed teeth","television","work"],"squirrel":false},
  {"events":["pizza","cycling","weekend"],"squirrel":false},
  {"events":["carrot","brushed teeth","weekend"],"squirrel":false},
  {"events":["carrot","beer","brushed teeth","work"],"squirrel":false},
  {"events":["pizza","peanuts","candy","work"],"squirrel":true},
  {"events":["carrot","peanuts","brushed teeth","reading","work"],"squirrel":false},
  {"events":["potatoes","peanuts","brushed teeth","work"],"squirrel":false},
  {"events":["carrot","nachos","brushed teeth","exercise","work"],"squirrel":false},
  {"events":["pizza","peanuts","brushed teeth","television","weekend"],"squirrel":false},
  {"events":["lasagna","brushed teeth","cycling","weekend"],"squirrel":false},
  {"events":["cauliflower","peanuts","brushed teeth","computer","work","touched tree"],"squirrel":false},
  {"events":["lettuce","brushed teeth","television","work"],"squirrel":false},
  {"events":["potatoes","brushed teeth","computer","work"],"squirrel":false},
  {"events":["bread","candy","work"],"squirrel":false},
  {"events":["potatoes","nachos","work"],"squirrel":false},
  {"events":["carrot","pudding","brushed teeth","weekend"],"squirrel":false},
  {"events":["carrot","brushed teeth","exercise","weekend","touched tree"],"squirrel":false},
  {"events":["brussel sprouts","running","work"],"squirrel":false},
  {"events":["brushed teeth","work"],"squirrel":false},
  {"events":["lettuce","brushed teeth","running","work"],"squirrel":false},
  {"events":["candy","brushed teeth","work"],"squirrel":false},
  {"events":["brussel sprouts","brushed teeth","computer","work"],"squirrel":false},
  {"events":["bread","brushed teeth","weekend"],"squirrel":false},
  {"events":["cauliflower","brushed teeth","weekend"],"squirrel":false},
  {"events":["spaghetti","candy","television","work","touched tree"],"squirrel":false},
  {"events":["carrot","pudding","brushed teeth","work"],"squirrel":false},
  {"events":["lettuce","brushed teeth","work"],"squirrel":false},
  {"events":["carrot","ice cream","brushed teeth","cycling","work"],"squirrel":false},
  {"events":["pizza","brushed teeth","work"],"squirrel":false},
  {"events":["spaghetti","peanuts","exercise","weekend"],"squirrel":true},
  {"events":["bread","beer","computer","weekend","touched tree"],"squirrel":false},
  {"events":["brushed teeth","running","work"],"squirrel":false},
  {"events":["lettuce","peanuts","brushed teeth","work","touched tree"],"squirrel":false},
  {"events":["lasagna","brushed teeth","television","work"],"squirrel":false},
  {"events":["cauliflower","brushed teeth","running","work"],"squirrel":false},
  {"events":["carrot","brushed teeth","running","work"],"squirrel":false},
  {"events":["carrot","reading","weekend"],"squirrel":false},
  {"events":["carrot","peanuts","reading","weekend"],"squirrel":true},
  {"events":["potatoes","brushed teeth","running","work"],"squirrel":false},
  {"events":["lasagna","ice cream","work","touched tree"],"squirrel":false},
  {"events":["cauliflower","peanuts","brushed teeth","cycling","work"],"squirrel":false},
  {"events":["pizza","brushed teeth","running","work"],"squirrel":false},
  {"events":["lettuce","brushed teeth","work"],"squirrel":false},
  {"events":["bread","brushed teeth","television","weekend"],"squirrel":false},
  {"events":["cauliflower","peanuts","brushed teeth","weekend"],"squirrel":false}
];

// This makes sure the data is exported in node.js —
// `require('./path/to/journal.js')` will get you the array.
if (typeof module != "undefined" && module.exports && (typeof window == "undefined" || window.exports != exports))
  module.exports = JOURNAL;
if (typeof global != "undefined" && !global.JOURNAL)
  global.JOURNAL = JOURNAL;

function tableFor(event, journal) {
  let table = [0, 0, 0, 0];
  for (let i = 0; i < journal.length; i++) {
    let entry = journal[i], index = 0;
    if (entry.events.includes(event)) index += 1;
    if (entry.squirrel) index += 2;
    table[index] += 1;
  }
  return table;
}

for (let entry of JOURNAL) {
  console.log(`${entry.events.length} events.`);
}

console.log(tableFor("pizza", JOURNAL));

function journalEvents(journal) {
  let events = [];
  for (let entry of journal) {
    for (let event of entry.events) {
      if (!events.includes(event)) {
        events.push(event);
      }
    }
  }
  return events;
}

console.log(journalEvents(JOURNAL));

for (let event of journalEvents(JOURNAL)) {
  console.log(event + ":", phi(tableFor(event, JOURNAL)));
}

for (let event of journalEvents(JOURNAL)) {
  let correlation = phi(tableFor(event, JOURNAL));
  if (correlation > 0.1 || correlation < -0.1) {
    console.log(event + ":", correlation);
  }
}

for (let entry of JOURNAL) {
  if (entry.events.includes("peanuts") &&
     !entry.events.includes("brushed teeth")) {
    entry.events.push("peanut teeth");
  }
}
console.log(phi(tableFor("peanut teeth", JOURNAL)));

// The sums of an range

function range(start, end, step){
  var array = [];
  if(step == undefined || step == null || step ==0){
    for(var i = start; i <= end; i++){
      array.push(i);
    }
  }else if(step > 0){
    for(var i = start; i <= end; i += step){
      array.push(i);
    }
  }else{
    for(var i = start; i >= end; i += step){
      array.push(i);
    }
  }
  return array;
}

function sum(array){
  var temp = 0;
  for(var i = 0; i < array.length; i++){
    temp += array[i];
  }
  return temp;
}
console.log(range(1, 10));
// → [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
console.log(range(1, 10, 2));
// → [1, 3, 5, 7, 9]
console.log(range(5, 2, -1));
// → [5, 4, 3, 2]
console.log(sum(range(1, 10)));
// → 55

// Your code here.
function reverseArray(array){
  var arrayLength = array.length;
  var newArray = [];
  for (var i = 0; i < arrayLength; i++){
    newArray.unshift(array[i]);
  }
  return newArray;
}

function reverseArrayInPlace(arr){
  var halfLength = Math.floor((arr.length - 1) / 2);
  console.log(halfLength);
  for(var i = 0; i <= halfLength; i++){
    let tempChar = arr[i];
    arr[i] = arr[arr.length - 1 - i];
    arr[arr.length - 1 - i] = tempChar;
  }
  return arr;
}


console.log(reverseArray(["A", "B", "C"]));
// → ["C", "B", "A"];
let arrayValue = [1, 2, 3, 4, 5];
reverseArrayInPlace(arrayValue);
console.log(arrayValue);
// → [5, 4, 3, 2, 1]

// Your code here.
function arrayToList(array){
  var list = {};
  for(var i = array.length - 1; i >= 0; i--){
    if (i == array.length - 1){
      list = {value: array[i], rest: null};
    }else{
      list = {value: array[i], rest: list}
    }
  }
  return list;
}


function listToArray(list){
  var array = [];
  for(let node = list; node; node = node.rest){
    array.push(node.value);
  }
  return array;
}

function prepend(val1, val2){
  return list = {value: val1, rest: val2}
}

/*function nth(list, position){
  var i = 0;  
  for(let node = list; node; node = node.rest){
      if(i == position){
        return node.value;
      }
      i++;
  }
}*/
/*function nth(list, n) {
  if (!list) {
    return undefined;
  }
  else if (n == 0) {
    console.log(list);
    return list.value;
  }
  else {
    console.log(list);
    return nth(list.rest, n - 1);
  }
}*/

function nth(node, position){
 if(count == undefined){
   count = 0;
   console.log(node);
 }
  if(position == 0){
    return node.value;
  }else{
    return nth(node.rest, position - 1);
  }
}

console.log(arrayToList([10, 20]));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(listToArray(arrayToList([10, 20, 30])));
// → [10, 20, 30]
console.log(prepend(10, prepend(20, null)));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(nth(arrayToList([10, 20, 30]), 1));
// → 20

function deepEqual(value, value1){
  if (value === value1) return true;
  
  if (value == null || typeof value != "object" || value1 == null || 
      typeof value1 != "object"){
    return false;
  }
   
  
  let keysA = Object.keys(value), keysB = Object.keys(value1);
  
  if (keysA.length != keysB.length){
    return false;
  }
  
  for(let key of keysA){
    if (!keysB.includes(key) || !deepEqual(value[key], value1[key])){
      return false;
    }
  }
  
  return true;
}

let obj = {here: {is: "an"}, object: 2};
console.log(deepEqual(obj, obj));
// → true
console.log(deepEqual(obj, {here: 1, object: 2}));
// → false
console.log(deepEqual(obj, {here: {is: "an"}, object: 2}));
// → true

let arrays = [[1, 2, 3], [4, 5], [6]];
// Your code here.

function flattenArray(array){
  var flatten = [];
  for (var i = 0; i < array.length; i++){
    var current = array[i];
    for(var j = 0; j < current.length; j++){
      flatten.push(current[j]);
    }
  }
  return flatten;
}
console.log(flattenArray(arrays))
console.log(arrays.reduce((flat, current) => flat.concat(current), []));

// → [1, 2, 3, 4, 5, 6]

// Your code here.

function loop(start, test, update, body){
  for(var value = start; test(value); value = update(value)){
    body(value);
  }
}
loop(3, n => n > 0, n => n - 1, console.log);
// → 3
// → 2
// → 1

/*function every(array, test) {
  // Your code here.
  for(let element of array){
    if(!test(element)){
      return false;
    }
  }
  return true;
}*/

function every(array, test){
 return !array.some(element => !test(element));
}
console.log(every([1, 3, 5], n => n < 10));
// → true
console.log(every([2, 4, 16], n => n < 10));
// → false
console.log(every([], n => n < 10));
// → true

function dominantDirection(text) {
  // Your code here.
  let counted = countBy(text, char => {
    let script = characterScript(char.codePointAt(0));
    return script ? script.direction : "none";
  }).filter(({name}) => name != "none");
  
  if (counted.length == 0){
    return "ltr";
  }
  
  return counted.reduce((a,b) => a.count > b.count ? a : b).name;
}

console.log(dominantDirection("Hello!"));
// → ltr
console.log(dominantDirection("Hey, مساء الخير"));
// → rtl

// Your code here.
class Vec {
  constructor(x, y){
    this.x = x;
    this.y = y;
  }
  
  plus(other){
    return new Vec(this.x + other.x, this.y + other.y);
  }
  
  minus(other){
    return new Vec(this.x - other.x, this.y - other.y);
  }
  
  get length(){
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }
}

console.log(new Vec(1, 2).plus(new Vec(2, 3)));
// → Vec{x: 3, y: 5}
console.log(new Vec(1, 2).minus(new Vec(2, 3)));
// → Vec{x: -1, y: -1}
console.log(new Vec(3, 4).length);
// → 5

class Group {
  // Your code here.
  constructor(){
    this.members = [];
  }
  
  has(value){
    return this.members.includes(value);
  }
  
  add(value){
    if(!this.has(value)){
      this.members.push(value);
    }
  }
  
  delete(value){
    this.members = this.members.filter(v => v !== value);
  }
  
  static from(array){
    let group = new Group;
    for(let element of array){
      group.add(element);
    }
    return group;
  }
}

let group = Group.from([10, 20]);
console.log(group.has(10));
// → true
console.log(group.has(30));
// → false
group.add(10);
group.delete(10);
console.log(group.has(10));
// → false

// Your code here (and the code from the previous exercise)

class Group {
  // Your code here.
  constructor(){
    this.members = [];
  }
  
  has(value){
    return this.members.includes(value);
  }
  
  add(value){
    if(!this.has(value)){
      this.members.push(value);
    }
  }
  
  delete(value){
    this.members = this.members.filter(v => v !== value);
  }
  
  static from(array){
    let group = new Group;
    for(let element of array){
      group.add(element);
    }
    return group;
  }
  
  [Symbol.iterator](){
    return new GroupIterator(this);
  }
}

class GroupIterator {
  constructor(group){
    this.group = group;
    this.counter = 0;
  }
  
  next(){
    if(this.counter >= this.group.members.length){
      return {done: true};
    }else {
      let result = {value: this.group.members[this.counter], done: false};
      this.counter++;
      return result;
    }
  }
}

for (let value of Group.from(["a", "b", "c"])) {
  console.log(value);
}
// → a
// → b
// → c

let map = {one: true, two: true, hasOwnProperty: true};

// Fix this call
console.log(Object.prototype.hasOwnProperty.call(map, "one"));
// → true

const roads = [
  "Alice's House-Bob's House",   "Alice's House-Cabin",
  "Alice's House-Post Office",   "Bob's House-Town Hall",
  "Daria's House-Ernie's House", "Daria's House-Town Hall",
  "Ernie's House-Grete's House", "Grete's House-Farm",
  "Grete's House-Shop",          "Marketplace-Farm",
  "Marketplace-Post Office",     "Marketplace-Shop",
  "Marketplace-Town Hall",       "Shop-Town Hall"
];

function buildGraph(edges) {
  let graph = Object.create(null);
  function addEdge(from, to) {
    if (graph[from] == null) {
      graph[from] = [to];
    } else {
      graph[from].push(to);
    }
  }
  for (let [from, to] of edges.map(r => r.split("-"))) {
    addEdge(from, to);
    addEdge(to, from);
  }
  return graph;
}

const roadGraph = buildGraph(roads);

class VillageState {
  constructor(place, parcels) {
    this.place = place;
    this.parcels = parcels;
  }

  move(destination) {
    if (!roadGraph[this.place].includes(destination)) {
      return this;
    } else {
      let parcels = this.parcels.map(p => {
        if (p.place != this.place) return p;
        return {place: destination, address: p.address};
      }).filter(p => p.place != p.address);
      return new VillageState(destination, parcels);
    }
  }
}

let first = new VillageState(
  "Post Office",
  [{place: "Post Office", address: "Alice's House"}]
);
let next = first.move("Alice's House");

console.log(next.place);
// → Alice's House
console.log(next.parcels);
// → []
console.log(first.place);
// → Post Office

function runRobot(state, robot, memory) {
  for (let turn = 0;; turn++) {
    if (state.parcels.length == 0) {
      console.log(`Done in ${turn} turns`);
      break;
    }
    let action = robot(state, memory);
    state = state.move(action.direction);
    memory = action.memory;
    console.log(`Moved to ${action.direction}`);
  }
}

VillageState.random = function(parcelCount = 5) {
  let parcels = [];
  for (let i = 0; i < parcelCount; i++) {
    let address = randomPick(Object.keys(roadGraph));
    let place;
    do {
      place = randomPick(Object.keys(roadGraph));
    } while (place == address);
    parcels.push({place, address});
  }
  return new VillageState("Post Office", parcels);
};

const mailRoute = [
  "Alice's House", "Cabin", "Alice's House", "Bob's House",
  "Town Hall", "Daria's House", "Ernie's House",
  "Grete's House", "Shop", "Grete's House", "Farm",
  "Marketplace", "Post Office"
];

function routeRobot(state, memory) {
  if (memory.length == 0) {
    memory = mailRoute;
  }
  return {direction: memory[0], memory: memory.slice(1)};
}

function findRoute(graph, from, to) {
  let work = [{at: from, route: []}];
  for (let i = 0; i < work.length; i++) {
    let {at, route} = work[i];
    for (let place of graph[at]) {
      if (place == to) return route.concat(place);
      if (!work.some(w => w.at == place)) {
        work.push({at: place, route: route.concat(place)});
      }
    }
  }
}

function goalOrientedRobot({place, parcels}, route) {
  if (route.length == 0) {
    let parcel = parcels[0];
    if (parcel.place != place) {
      route = findRoute(roadGraph, place, parcel.place);
    } else {
      route = findRoute(roadGraph, place, parcel.address);
    }
  }
  return {direction: route[0], memory: route.slice(1)};
}



function compareRobots(robot1, memory1, robot2, memory2) {
  // Your code here
  let total1 = 0, total2 = 0;
  for(var i = 0; i < 100; i++){
    let state = VillageState.random();
    total1 += countSteps(state, robot1, memory1);
    total2 += countSteps(state, robot2, memory2);
  }
  console.log(`Robot 1 needed ${total1/ 100} steps per task`);
  console.log(`Robot 2 needed ${total2/ 100} steps`);
}

function countSteps(state, robot, memory){
  for (let steps = 0;; steps++) {
    if (state.parcels.length == 0) {
      return steps;
    }
    let action = robot(state, memory);
    state = state.move(action.direction);
    memory = action.memory;
  }
}

compareRobots(routeRobot, [], goalOrientedRobot, []);

// Your code here

function yourRobot({place, parcels}, route) {
  if (route.length == 0) {
    let routes = parcels.map(parcel => {
      // Describes the route for each parcel
      if (parcel.place != place) {
        return {route: findRoute(roadGraph, place, parcel.place),
                pickup: true};
      } else {
        return {route: findRoute(roadGraph, place, parcel.address),
               pickup: false};
      }
    });
    function score({route, pickup}){
      return (pickup ? 0.5 : 0) - route.length;
    }
    route = routes.reduce((a,b) => score(a) > score(b) ? a : b).route;
  }
  
  return {direction: route[0], memory: route.slice(1)};
}
runRobotAnimation(VillageState.random(), yourRobot, []);

class PGroup {
  // Your code here
   constructor(members){
    this.members = members;
  }
  
  has(value){
    return this.members.includes(value);
  }
  
  add(value){
    if(this.has(value)){
      return this;
    }
    return new PGroup(this.members.concat([value]));
  }
  
  delete(value){
    if(!this.has(value)){
      return this;
    }
    return new PGroup(this.members.filter(v => v !== value));
  }
}

PGroup.empty = new PGroup([]);

let a = PGroup.empty.add("a");
let ab = a.add("b");
let b = ab.delete("a");

console.log(b.has("b"));
// → true
console.log(a.has("b"));
// → false
console.log(b.has("a"));
// → false

class MultiplicatorUnitFailure extends Error {}

function primitiveMultiply(a, b) {
  if (Math.random() < 0.2) {
    return a * b;
  } else {
    throw new MultiplicatorUnitFailure("Klunk");
  }
}

function reliableMultiply(a, b) {
  // Your code here.
  for(;;){
   try{
     return primitiveMultiply(a,b);
   } catch (e){
     if (!(e instanceof MultiplicatorUnitFailure)){
       throw(e);
     }
   }
  }
}

console.log(reliableMultiply(8, 8));
// → 64

const box = {
  locked: true,
  unlock() { this.locked = false; },
  lock() { this.locked = true;  },
  _content: [],
  get content() {
    if (this.locked) throw new Error("Locked!");
    return this._content;
  }
};

function withBoxUnlocked(body) {
  // Your code here.
  let locked = box.locked;
  if(!locked){
    return body();
  }
  
  box.unlock();
  try{
   return body(); 
  } finally{
   	box.lock(); 
  }
}

withBoxUnlocked(function() {
  box.content.push("gold piece");
});

try {
  withBoxUnlocked(function() {
    throw new Error("Pirates on the horizon! Abort!");
  });
} catch (e) {
  console.log("Error raised: " + e);
}
console.log(box.locked);
// → true

// Fill in the regular expressions

verify(/ca[rt]/,
       ["my car", "bad cats"],
       ["camper", "high art"]);

verify(/pr?op/,
       ["pop culture", "mad props"],
       ["plop", "prrrop"]);

verify(/ferr[etyari]/,
       ["ferret", "ferry", "ferrari"],
       ["ferrum", "transfer A"]);

verify(/ious\b/,
       ["how delicious", "spacious room"],
       ["ruinous", "consciousness"]);

verify(/\s[.,:;]/,
       ["bad punctuation ."],
       ["escape the period"]);

verify(/\w{7}/,
       ["hottentottententen"],
       ["no", "hotten totten tenten"]);

verify(/\b[^\We]+\b/i,
       ["red platypus", "wobbling nest"],
       ["earth bed", "learning ape", "BEET"]);


function verify(regexp, yes, no) {
  // Ignore unfinished exercises
  if (regexp.source == "...") return;
  for (let str of yes) if (!regexp.test(str)) {
    console.log(`Failure to match '${str}'`);
  }
  for (let str of no) if (regexp.test(str)) {
    console.log(`Unexpected match for '${str}'`);
  }
}

let text = "'I'm the cook,' he said, 'it's my job.'";
// Change this call.
console.log(text.replace(/(^|\W)'|'(\W|$)/g, '$1"$2'));
// → "I'm the cook," he said, "it's my job."

// Fill in this regular expression.
let number = /^[+\-]?(\d+(\.\d*)?|\.\d+)([eE][+\-]?\d+)?$/;

// Tests:
for (let str of ["1", "-1", "+15", "1.55", ".5", "5.",
                 "1.3e2", "1E-4", "1e+12"]) {
  if (!number.test(str)) {
    console.log(`Failed to match '${str}'`);
  }
}
for (let str of ["1a", "+-1", "1.2.3", "1+1", "1e4.5",
                 ".5.", "1f5", "."]) {
  if (number.test(str)) {
    console.log(`Incorrectly accepted '${str}'`);
  }
}

